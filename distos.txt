"// This effect Copyright (C) 2004 and later Cockos Incorporated
// License: LGPL - http://www.gnu.org/licenses/lgpl.html

desc:Distortion
//tags: guitar distortion waveshaper
//author: Cockos

slider1:20<0,50,1>Gain (dB)
slider2:6<1,10,1>Hardness
slider3:-12<-40,0,1>Max Volume (dB)
slider4:0<0,2,1{Left,Right,Stereo}>Channel Mode

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
ext_tail_size=-2;

@slider
preamp=2^(slider1/6);
soft=2^slider2;
maxv=2 ^ (slider3/6);

//maxv=0.5 * (soft+maxv - sqrt((soft+maxv)*(soft+maxv)-4*(maxv*(soft-1)-1)));

@sample

slider4 != 1 ? (
spl0*=preamp;
t=abs(spl0);
t > maxv ? 
(
  s=sign(spl0);
  diff=t-maxv;
  spl0=s*(maxv + diff/(soft+diff));
);

);

slider4 != 0 ? (
spl1*=preamp;
t=abs(spl1);
t > maxv ? 
(
  s=sign(spl1);
  diff=t-maxv;
  spl1=s*(maxv + diff/(soft+diff));
);

);"

"desc:Distortion (Fuzz)
//tags: guitar distortion waveshaper
//author: Cockos

slider1:20<1,300>Shape
slider2:-25<-60,60,1>Hard Limit (dB)
slider3:0<-120,0,1>Wet Mix (dB)
slider4:-60<-120,0,1>Dry Mix (dB)
slider5:0<0,2,1{Left,Right,Stereo}>Channel Mode

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
ext_tail_size=-2;

@slider
maxv=2 ^ (slider2/6);
s11=slider1-1;
wet=2^(slider3/6);
dry=2^(slider4/6);

@block
@sample

slider5 != 1 ? (
as=abs(spl0);
s0=spl0 * (as + slider1) / (as*(as + s11) + 1);
spl0=max(min(s0,maxv),-maxv)*wet + spl0*dry;
);

slider5 != 0 ? (
as=abs(spl1);
s0=spl1 * (as + slider1) / (as*(as + s11) + 1);
spl1=max(min(s0,maxv),-maxv)*wet + spl1*dry;
);"

"version:2.1.7
desc:Retro Distortion
provides:
  Retro_Distortion/DistortionBackground.png
  Retro_Distortion/RetroDistortionKnob 90x90.png
  Retro_Distortion/RetroDistortionText.png
author: Stephen Boyes
about:
  # Retro Distortion
  Versatile saturation/distortion effect.
  Three stages of non-linear distortion
  one    -  tanh soft clipper
  two    -  a blend of 2nd harmonic and a distortion that works at all signal levels!
  three  -  tanh soft clipper
  Controls -
  . Headroom
  Less headroom = more distortion from clippers and optional 2nd harmonic.
  . Distortion
  More 2nd harmonic and/or dynamic variable distortion.
  . Dynamic Mix
  Blends in the dynamic variable distortion.
  . out gain
  Output level
changelog:
  - GUI download missing png files


///////////////////////////////////////////////
/         S.Boyes 2023
///////////////////////////////////////////////
/ Aditional code by...
/ SVF filter code by Andy Simper (Cytomic) 
///////////////////////////////////////////////
/ DC blocker from Cockoos JSFX
///////////////////////////////////////////////


options:gfx_Hz=60;
tags:distortion



filename:0,Retro_Distortion/DistortionBackground.png
filename:1,Retro_Distortion/RetroDistortionKnob 90x90.png
filename:2,Retro_Distortion/RetroDistortionText.png

-slider1:gain_db=0<-24,12,1>Headroom
-slider2:0.5<0,1,0.01>Distortion
-slider3:0.5<0,1,0.01>Dynamic Mix
slider4:out_gain_db=<-24,12,0.5>out gain (dB)
slider5:0<0,1,1{Distort,Saturate}>Mode

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
last_gain=10^(-gain_db/20);
last_gain_out=10^(out_gain_db/20);
DCcoef = exp(-2 * $pi *25/srate);

function svf_lowp(v0,cutoff,Q)
instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,m0,m1,m2)
(
 g = tan($pi*cutoff/srate);
 k = 1/q;
 a1 = 1/(1+g*(g+k));
 a2 = g*a1;
 a3 = g*a2;
 //m0 = 0;
 //m1 = 0;
 m2 = 1;
 v3 = v0-ic2eq;
 v1 = a1*ic1eq+a2*v3;
 v2 = ic2eq+a2*ic1eq+a3*v3;
 ic1eq = 2*v1-ic1eq;
 ic2eq = 2*v2-ic2eq;
 /*m0*v0+m1*v1+*/m2*v2
);


function dyn_sat (in,z)
instance(in,y,buff0,buff1,count,y,z,pos,pos1,RMS_Y,buffy,RMS_Z,buffz,compressor)
(
z = this.svf_lowp(z,4800,0.3);
y = 0.0001+z*z;

RMS_Y = this.y.svf_lowp(y,550,0.41);
RMS_z = this.z.svf_lowp(z,550,0.41);

compressor = 0.15+(RMS_Z/RMS_Y)*0.85;
compressor = max(0.02,compressor);
compressor = min(50,compressor);
y = y*compressor;
out = (in*1.618-y*slider2)*0.618
);

function dyn_sat_subtle (in,z)
instance(in,y,buff0,buff1,count,y,z,pos,pos1,RMS_Y,buffy,RMS_Z,buffz,compressor)
(
z = this.svf_lowp(z,1150,0.2)*0.96 + z*0.04;
y = 0.0001+z*z;

RMS_Y = this.y.svf_lowp(y,50,0.5);
RMS_z = this.z.svf_lowp(z,50,0.5);

compressor = 0.1+(RMS_Z/RMS_Y)*0.9;
compressor = min(1*10^11,compressor);
compressor = max(1,compressor);
compressor = sqrt(compressor);
compressor = compressor*0.5+0.5;
compressor = min(1100,compressor);
y = y*compressor;
out = (in*2-y*slider2)*0.5
);

function sat (input)
instance (input)
(
y = input*input;
(input-y*slider2)
);


function soft_clip(x)
(
   2/(1+exp(-2*x))-1;
);

/******************************* GUI Function ***********************************/

   
  function button_rect(x,y,w,h)
  (
    mouse_x >= x && mouse_x <= x+w && mouse_y >= y && mouse_y <= y+h ? (
    this.button = 1111;
    ):(
    this.button = 0;
    );
  );

  function mouse_on()//instance(count)
  (
  1 && mouse_cap ? count += 1 : count = 0;
  count > 0 && count < 2 ? m_on =1 : m_on = 0;
  m_on
  );
  
  function mouse_off()
  (
  1 && mouse_cap ? m_off = 0 : m_off = 1;
  m_off
  );
  
  function y_drag(area,cap,m_on,m_off)local(area,cap)instance(up,down,storeY,area,click,cap)
  (
  area && m_on ? area = 1 : area = 0;
  area && mouse_cap && cap ? click = 1;
  m_off == 1 ? click = 0;
  click ? (
    mouse_y < storeY ? (up = 1; down = 0;);
    mouse_y > storeY ? (up = 0; down = 1;);
  );
  mouse_cap != cap ? click = 0;
  storeY == mouse_y ? up=down=0;
  storeY = mouse_y;
  );


@slider

@block
next_gain=10^(-gain_db/20);
next_gain_out=10^(out_gain_db/20);
dyngain = slider3;
satgain = 1-slider3;
d_gain = (next_gain - last_gain)/samplesblock;
d_gain_out = (next_gain_out - last_gain_out)/samplesblock;

@sample
spl0 *= last_gain;
spl1 *= last_gain;

slider5 == 1 ?
(
spl0 *= 0.5;  spl1 *= 0.5;
);



spl0 = inr.soft_clip(spl0*0.8)*1.25;
spl1 = inl.soft_clip(spl1*0.8)*1.25;


//rectify
REC0 = sqrt(0.0001+spl0*spl0);
REC1 = sqrt(0.0001+spl1*spl1);

//saturation
slider5 == 0 ?
(
DYN0 = lef.dyn_sat(spl0,REC0);
DYN1 = rig.dyn_sat(spl1,REC1);
SAT0 = left.sat(spl0);
SAT1 = righ.sat(spl1);
):(
DYN0 = lef.dyn_sat_subtle(spl0,REC0);
DYN1 = rig.dyn_sat_subtle(spl1,REC1);
SAT0 = left.sat(spl0*0.5)*1.4+spl0*0.3;
SAT1 = righ.sat(spl1*0.5)*1.4+spl1*0.3;
);

spl0 = DYN0*dyngain + SAT0*satgain;
spl1 = DYN1*dyngain + SAT1*satgain;

//DC blocker
otm1= DCcoef*otm1 + spl0 - itm1; itm1=spl0; spl0=otm1;
otm2= DCcoef*otm2 + spl1 - itm2; itm2=spl1; spl1=otm2;

slider5 == 1 ?
(
spl0 *= 2;  spl1 *= 2;
);


//output level
spl0 /= last_gain;
spl1 /= last_gain;
spl0 *= last_gain_out;
spl1 *= last_gain_out;
last_gain += d_gain;
last_gain_out += d_gain_out;

spl0 = outl.soft_clip(spl0);
spl1 = outr.soft_clip(spl1);


@gfx 480 600
  size = min(gfx_w/720,gfx_h/900);
  gfx_x=gfx_y=0;  gfx_blit(0,size,0,0,0,720,900);
  gfx_x=60*size;gfx_y=650*size; gfx_blit(2,size,0,0,0,600,200);
  
  /******************************* GUI Control ***********************************/
 
  //load state change
  mouse_on() = m_on;
  mouse_off() = m_off;
  aaaa = mouse_cap;
  
  //define the button
  head.button_rect(90*size,90*size,180*size,180*size);
  //setup the drag
  head.y_drag(head.button,1,m_on,m_off);//left click drag
  //define what happens
  head.down ? gain_db=max(gain_db-=0.5,-24);
  head.up ? gain_db=min(gain_db+=0.5,12);

  //define the button
  dist.button_rect(450*size,90*size,180*size,180*size);
  //setup the drag
  dist.y_drag(dist.button,1,m_on,m_off);//left click drag
  //define what happens
  dist.down ? slider2=max(slider2-=0.02,0);
  dist.up ? slider2=min(slider2+=0.02,1);

  //define the button
  dyn.button_rect(270*size,210*size,180*size,180*size);
  //setup the drag
  dyn.y_drag(dyn.button,1,m_on,m_off);//left click drag
  //define what happens
  dyn.down ? slider3=max(slider3-=0.02,0);
  dyn.up ? slider3=min(slider3+=0.02,1);

  gfx_x=gfx_y=90*size;             knob1=floor(1.77*(gain_db+24)); gfx_blit(1,2*size,0,0,knob1*90,90,90);
  gfx_x=450*size; gfx_y=90*size;   knob2=floor(63.99*slider2); gfx_blit(1,2*size,0,0,knob2*90,90,90);
  gfx_x=270*size; gfx_y=210*size;  knob3=floor(63.99*slider3); gfx_blit(1,2*size,0,0,knob3*90,90,90);
  
  gfx_r=gfx_g=gfx_b=1;
  gfx_x=135*size;  gfx_y=270*size;  gfx_drawstr("Headroom");
  gfx_x=495*size;  gfx_y=270*size;  gfx_drawstr("Distortion");
  gfx_x=315*size;  gfx_y=390*size;  gfx_drawstr("Dynamic Mix");"

  "desc:Saike Never Odd or Even (Distortion)
tags: static waveshaper
version: 0.05
author: Joep Vanlier
changelog: Add DC blocker that induces less phase distortion. Add oversampling option.
provides: nooo_deps/*
Copyright (C) 2019 Joep Vanlier
License: MIT

slider1:current_gain=0<-6,24,0.0001>Gain (dB)
slider2:current_ceiling=0<-36,0,0.0001>Ceiling (dB)
slider3:even=0<0,1,.0001>Even
slider4:odd=0<0,1,.0001>Odd
slider5:warmth=0<-12,12,.001>Warmth (dB)
slider7:dc_correct=2<0,2,1{IIR (can induce phase distortion),OFF,Improved IIR (less phase distortion)}>DC Correction
slider8:agc=0<0,2,1{OFF,active adjustment,fixed}>Dynamic Gain Compensation
slider9:oversampling=1<1,4,1>Oversampling factor

import nooo_upsamplers.jsfx-inc
import nooo_agc.jsfx-inc

@init
  /* Very flat 6-pole butterworth made of cascade of cytomics' SVF */
  function init_HP6(freq)
    global(srate)
    local(res)
    instance(g, a1_1, a1_2, a1_3, a2_1, a2_2, a2_3, k1, k2, k3)
    (
      g = tan( $pi * freq );
      
      k1  = 1.93185165257814; // sqrt(2+sqrt(3))
      a1_1 = 1/(1+g*(g+k1));
      
      k2 = 1.41421356474619; // sqrt(2)
      a1_2 = 1/(1+g*(g+k2));
      
      k3 = 0.517638090205042; // sqrt(2-sqrt(3))
      a1_3 = 1/(1+g*(g+k3));
      
      a2_1 = g*a1_1;
      a2_2 = g*a1_2;
      a2_3 = g*a1_3;
    );

  function eval_HP6(v0)
    global()
    local(v1, v2, hp)
    instance(ic1eq, ic2eq, ic3eq, ic4eq, ic5eq, ic6eq,
             g, a1_1, a1_2, a1_3, a2_1, a2_2, a2_3, k1, k2, k3)
    (
      v1 = a1_1 * ic1eq + a2_1*(v0-ic2eq);
      v2 = ic2eq + g*v1;
      ic1eq = 2*v1 - ic1eq;
      ic2eq = 2*v2 - ic2eq;
      hp    = v0 - k1*v1 - v2;
      
      v1 = a1_2 * ic3eq + a2_2*(hp-ic4eq);
      v2 = ic4eq + g*v1;
      ic3eq = 2*v1 - ic3eq;
      ic4eq = 2*v2 - ic4eq;
      hp    = hp - k2*v1 - v2;
      
      v1 = a1_3 * ic5eq + a2_3*(hp-ic6eq);
      v2 = ic6eq + g*v1;
      ic5eq = 2*v1 - ic5eq;
      ic6eq = 2*v2 - ic6eq;
      
      hp    = hp - k3*v1 - v2;
    );
    
  function eval_SubLP(v0)
    global()
    local(v1, v2)
    instance(ic1eq, ic2eq, ic3eq, ic4eq, ic5eq, ic6eq,
             g, a1_1, a1_2, a1_3, a2_1, a2_2, a2_3, k1, k2, k3)
    (
      v1 = a1_1 * ic1eq + a2_1*(v0-ic2eq);
      v2 = ic2eq + g*v1;
      ic1eq = 2*v1 - ic1eq;
      ic2eq = 2*v2 - ic2eq;
      
      v1 = a1_2 * ic3eq + a2_2*(v2-ic4eq);
      v2 = ic4eq + g*v1;
      ic3eq = 2*v1 - ic3eq;
      ic4eq = 2*v2 - ic4eq;
      
      v1 = a1_3 * ic5eq + a2_3*(v2-ic6eq);
      v2 = ic6eq + g*v1;
      ic5eq = 2*v1 - ic5eq;
      ic6eq = 2*v2 - ic6eq;
      
      v0 - v2
    );    

  function init_tilt(freq, res, A)
    global(srate, slider54)
    local(g, k)
    instance(ic1eq, ic2eq, A, a1, a2, a3, m0, m1, m2)
    (
      g = tan(.5 * $pi * freq) / sqrt(A);
      k = 2 - 2*res;
      
      a1 = 1/(1+g*(g+k));
      a2 = g*a1;
      a3 = g*a2;
      
      m0 = 1;
      m1 = k*(A-1);
      m2 = (A*A - 1);
    );

  function eval_tilt(v0)
    global()
    local(v1, v2, v3)
    instance(ic1eq, ic2eq, a1, a2, a3, m0, m1, m2)
    (
      v3 = v0 - ic2eq;
      v1 = a1 * ic1eq + a2 * v3;
      v2 = ic2eq + a2 * ic1eq + a3*v3;
      ic1eq = 2*v1 - ic1eq;
      ic2eq = 2*v2 - ic2eq;    
      
      (v0 + m1 * v1 + m2 * v2)
    );

dc0.init_HP6(7/srate);
dc1.init_HP6(7/srate);
dc2.init_HP6(10/srate);
dc3.init_HP6(10/srate);

freemem = 0;
freemem = in_level.level_estimator(freemem, 0.4);
freemem = out_level.level_estimator(freemem, 0.4);

@slider
log10d20_conversion = .11512925464970228420089957273422; //log(10)/20;
preamp      = exp(log10d20_conversion * current_gain);
ceiling     = exp(-log10d20_conversion * current_ceiling);
slew_target = exp(log10d20_conversion * 15 * slew);
inv_ceiling = 1.0 / ceiling;

tilt_gain = 10^(warmth / 20);
inverse_tilt_gain = 1.0 / tilt_gain;
omega_tilt = 3200 / srate;
l_tilt.init_tilt(omega_tilt, 0, tilt_gain);
r_tilt.init_tilt(omega_tilt, 0, tilt_gain);
l_itilt.init_tilt(omega_tilt, 0, inverse_tilt_gain);
r_itilt.init_tilt(omega_tilt, 0, inverse_tilt_gain);

@block
g_const = 0.9999^(1 / oversampling);

curFIRdelay = getFIRdelay(oversampling);
( pdc_delay != curFIRdelay ) ? (
  pdc_top_ch = 2;
  pdc_delay = curFIRdelay;
);

// mode 2 doesn't make sense unless a reference was taken
(agc == 2) && (agc_gain_reduction == 0) ? agc = 1;

@serialize
// Force initialization if not writing
writing = file_avail(0) < 0;
!writing ? ( agc_gain_reduction = 0; );
file_var(0, agc_gain_reduction);

@sample
function tanh(x)
local()
global()
instance()
(
  2/(1+exp(-2*x)) - 1
);

function processChannel(x)
local(t1, x_corrected)
global(even, odd, g_const)
instance(current_gain)
(
  current_gain = max(g_const*current_gain, abs(x));
  t1 = tanh(x);
  x_corrected = x*(tanh(current_gain))/current_gain;
  t1 = x_corrected + odd*(t1-x_corrected) + even*(t1 * t1);    
  t1
);

inL = ceiling*preamp*spl0;
inR = ceiling*preamp*spl1;

// De-emphasize before for warmth
warmth != 0 ? (
  inL=l_itilt.eval_tilt(inL)*tilt_gain;
  inR=r_itilt.eval_tilt(inR)*tilt_gain;
);

// Oversample here
(oversampling == 1) ? (
  l = left.processChannel(inL);
  r = right.processChannel(inR);
) : (
  upsampleL.updateUpHist(oversampling, inL);
  upsampleR.updateUpHist(oversampling, inR);
  
  f = 0;
  loop(oversampling,
    f += 1;
    inL = oversampling*upsampleL.upSample(oversampling);
    inR = oversampling*upsampleR.upSample(oversampling);
  
    outL = left.processChannel(inL);
    outR = right.processChannel(inR);
    downL.updateDownHist(oversampling, outL);
    downR.updateDownHist(oversampling, outR);
    
    ( f == 1 ) ? (
      l = downL.downSample(oversampling);
      r = downR.downSample(oversampling);
    );
  );
);

l *= inv_ceiling;
r *= inv_ceiling;

// Re-emphasize before for warmth
warmth != 0 ? (
  l=l_tilt.eval_tilt(l)*inverse_tilt_gain;
  r=r_tilt.eval_tilt(r)*inverse_tilt_gain;
);

(dc_correct == 0) ? (
  l = dc0.eval_HP6(l);
  r = dc1.eval_HP6(r);
) : (dc_correct == 2) ? (
  l = dc2.eval_SubLP(l);
  r = dc3.eval_SubLP(r);
);

(agc == 2) ? (
  l *= agc_gain_reduction;
  r *= agc_gain_reduction;
) : (agc == 1) ? (
  pklvl = 0.999 * pklvl + 0.001 * max(abs(spl0), abs(spl1));
  (pklvl > 0.001) ? (
    in_level.eval_gain(spl0, spl1);
    out_level.eval_gain(l, r);
  );
  
  in_level.got_full_buf ? (
    out_total = out_level.sum_l + out_level.sum_r;
    new_agc_gain_reduction = (out_total > 0.0001) ? sqrt((in_level.sum_l + in_level.sum_r) / out_total) : 1;
    
    agc_gain_reduction = 
      (new_agc_gain_reduction > agc_gain_reduction) ? 
      new_agc_gain_reduction
      : 0.9999 * agc_gain_reduction + 0.0001 * new_agc_gain_reduction;
    
    l *= agc_gain_reduction;
    r *= agc_gain_reduction;
  );
);

spl0 = l;
spl1 = r;"

"// (C) 2007, Michael Gruhn.

// NO WARRANTY IS GRANTED. THIS PLUG-IN IS PROVIDED ON AN "AS IS" BASIS, WITHOUT
// WARRANTY OF ANY KIND. NO LIABILITY IS GRANTED, INCLUDING, BUT NOT LIMITED TO,
// ANY DIRECT OR INDIRECT,  SPECIAL,  INCIDENTAL OR CONSEQUENTIAL DAMAGE ARISING
// OUT OF  THE  USE  OR INABILITY  TO  USE  THIS PLUG-IN,  COMPUTER FAILTURE  OF
// MALFUNCTION INCLUDED.  THE USE OF THE SOURCE CODE,  EITHER  PARTIALLY  OR  IN
// TOTAL, IS ONLY GRANTED,  IF USED IN THE SENSE OF THE AUTHOR'S INTENTION,  AND
// USED WITH ACKNOWLEDGEMENT OF THE AUTHOR. FURTHERMORE IS THIS PLUG-IN A  THIRD
// PARTY CONTRIBUTION,  EVEN IF INCLUDED IN REAPER(TM),  COCKOS INCORPORATED  OR
// ITS AFFILIATES HAVE NOTHING TO DO WITH IT.  LAST BUT NOT LEAST, BY USING THIS
// PLUG-IN YOU RELINQUISH YOUR CLAIM TO SUE IT'S AUTHOR, AS WELL AS THE CLAIM TO
// ENTRUST SOMEBODY ELSE WITH DOING SO.

desc:Waveshaping Distortion
//tags: processing distortion waveshaper
//author: LOSER

slider1:0<0,100,.1>Distortion (%)

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
ext_tail_size = -2;

@slider
hdistr = min(slider1/100,.999);
foo = 2*hdistr/(1-hdistr);

@sample
spl0 = min(max(spl0,-1),1);
spl1 = min(max(spl1,-1),1);

spl0 = (1+foo)*spl0/(1+foo*abs(spl0));
spl1 = (1+foo)*spl1/(1+foo*abs(spl1));


@gfx 192 192
gfxSize = min(gfx_w,gfx_h);


gfx_r=gfx_g=gfx_b=0; gfx_a=1;
gfx_x=gfx_y=0;
gfx_rectto(gfx_w,gfx_h);

gfx_r=gfx_g=gfx_b=0.8; gfx_a=1;
gfx_x=gfxSize/2; gfx_y=0;
gfx_lineto(gfxSize/2,gfxSize,0);
gfx_x=0; gfx_y=gfxSize/2;
gfx_lineto(gfxSize,gfxSize/2,0);

gfx_x = gfxSize-20; gfx_y = gfxSize/2;
gfx_drawchar($'I');
gfx_drawchar($'N');

gfx_x = gfxSize/2+2; gfx_y = 0;
gfx_drawchar($'O');
gfx_drawchar($'U');
gfx_drawchar($'T');

slider1 ? (
	gfx_r=0.5; gfx_g=1; gfx_b=0; gfx_a=1;
	gfx_x=0; gfx_y=gfxSize;
	x = -1;
	while(
		y = -(1+foo)*x/(1+foo*abs(x));
		gfx_lineto(x*gfxSize/2+gfxSize/2,y*gfxSize/2+gfxSize/2,1);
		(x+=0.05) <= 1;
	);
	gfx_lineto(gfxSize,0,1);
):(
	gfx_r=0.5; gfx_g=1; gfx_b=0; gfx_a=1;
	gfx_x=0; gfx_y=gfxSize;
	gfx_lineto(gfxSize,0,1);
);"