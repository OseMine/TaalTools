desc: TaalTools CookDSP Synthesizer
author: Taal
version: 1.0
changelog: Initial release

import ../Add/cookdsp.jsfx-inc
import ../Add/cookdsp_envelope.jsfx-inc
import ../Add/svf_filter.jsfx-inc

slider1:0<0,127,1>MIDI Note Display
slider2:0.5<0,1,0.01>Oscillator Level
slider3:0<0,4,1{Saw,Square,Sine,Triangle,FM}>Waveform
slider4:0<-24,24,1>Tune (st)
slider5:0<-100,100,1>Fine Tune (cents)
slider6:0<-2,2,0.01>Octave Shift
slider7:2<0.5,8,0.01>FM Ratio
slider8:0.5<0,1,0.01>FM Amount

@init
// Initialize variables
phase = 0;
phase_mod = 0;
current_freq = 440;
note_on = 0;
vel = 1.0;

// Initialize oscillator variables
osc1_phase = 0;
osc2_phase = 0;
osc1_freq = 440;
osc2_freq = 440 * 2;

env.env_init();
env.env_set_adsr(0.01, 0.1, 0.7, 0.1);

// Initialize filter
svf.svf_init();
svf.svf_set(1000, 0.5);

// Oscillator processing function
function osc1_process(phase, freq, wave_type) local(output, phase_inc) (
  phase_inc = freq / srate;
  
  // Generate waveform based on type
  wave_type == 0 ? ( // Saw
    output = 2 * (phase - floor(phase + 0.5));
  ) : wave_type == 1 ? ( // Square
    output = phase < 0.5 ? 1 : -1;
  ) : wave_type == 2 ? ( // Sine
    output = sin(2 * $pi * phase);
  ) : wave_type == 3 ? ( // Triangle
    output = 1 - 4 * abs(floor(phase) - phase);
  );
  
  // Update phase
  osc1_phase += phase_inc;
  osc1_phase >= 1 ? osc1_phase -= 1;
  
  output;
);

// Second oscillator processing function
function osc2_process(phase, freq, wave_type) local(output, phase_inc) (
  phase_inc = freq / srate;
  
  // Generate waveform based on type
  wave_type == 0 ? ( // Saw
    output = 2 * (phase - floor(phase + 0.5));
  ) : wave_type == 1 ? ( // Square
    output = phase < 0.5 ? 1 : -1;
  ) : wave_type == 2 ? ( // Sine
    output = sin(2 * $pi * phase);
  ) : wave_type == 3 ? ( // Triangle
    output = 1 - 4 * abs(floor(phase) - phase);
  );
  
  // Update phase
  osc2_phase += phase_inc;
  osc2_phase >= 1 ? osc2_phase -= 1;
  
  output;
);

@slider
// Nothing to update from sliders

@block
// Handle MIDI input
while (midirecv(offset, msg1, msg2, msg3)) (
  status = msg1 & $xF0;
  
  status == $x90 && msg3 > 0 ? (
    note_on = 1;
    vel = msg3/127;
    slider1 = msg2;
    
    // Calculate frequency with tuning
    current_freq = 440 * pow(2, (msg2 + slider4 + slider5/100 + slider6*12 - 69) / 12);
    
    // Set oscillator frequencies
    osc1_freq = current_freq;
    osc2_freq = current_freq * slider7;
  );
  
  (status == $x80 || (status == $x90 && msg3 == 0)) ? (
    note_on = 0;
  );
  
  midisend(offset, msg1, msg2, msg3); // Pass through MIDI
);

@sample
// Generate oscillator waveform if note is on
note_on ? (
  // Set oscillator types based on selected waveform
  slider3 == 0 ? ( // Saw
    osc1_wave = 0;
  ) : slider3 == 1 ? ( // Square
    osc1_wave = 1;
  ) : slider3 == 2 ? ( // Sine
    osc1_wave = 2;
  ) : slider3 == 3 ? ( // Triangle
    osc1_wave = 3;
  ) : slider3 == 4 ? ( // FM
    // FM synthesis - keep sine for both oscillators
    osc1_wave = 2;
    osc2_wave = 2;
    
    // Get modulator output and apply to carrier frequency
    mod = osc2_process(osc2_phase, osc2_freq, osc2_wave) * slider8 * 1000;
    osc1_freq = current_freq + mod;
  );
  
  // Generate output
  sample = osc1_process(osc1_phase, osc1_freq, osc1_wave);
  
  // Apply filter
  sample = svf.svf_process(sample);
  
  // Apply velocity and output
  spl0 = spl1 = sample * slider2 * vel * 0.5;
) : (
  spl0 = spl1 = 0;
);

@gfx 500 200
function draw_label(x, y, txt) (
  gfx_x = x; gfx_y = y;
  gfx_drawstr(txt);
);

function draw_waveform(x, y, w, h) local(i, px, py, sample, p) (
  gfx_set(0.2, 0.7, 0.9, 1);
  
  px = x;
  loop(w,
    p = 2 * $pi * (px - x) / w;
    
    slider3 == 0 ? ( // Saw
      sample = 2 * (p / (2*$pi) - floor(0.5 + p / (2*$pi)));
    ) : slider3 == 1 ? ( // Square
      sample = p < $pi ? 1 : -1;
    ) : slider3 == 2 ? ( // Sine
      sample = sin(p);
    ) : slider3 == 3 ? ( // Triangle
      sample = p < $pi ? -1 + 2 * p / $pi : 3 - 2 * p / $pi;
    ) : slider3 == 4 ? ( // FM
      mod = slider8 * sin(p * slider7);
      sample = sin(p + mod * 10);
    );
    
    py = y + h/2 - sample * h/3;
    gfx_line(px, y + h/2, px, py);
    px += 1;
  );
);

// Clear background
gfx_set(0.2, 0.2, 0.2, 1);
gfx_rect(0, 0, gfx_w, gfx_h);

// Draw title
gfx_set(1, 1, 1, 1);
draw_label(10, 10, "TaalTools CookDSP Synthesizer");

// Draw waveform display
gfx_set(0.8, 0.8, 0.8, 0.5);
gfx_rect(10, 40, gfx_w-15, 140);
draw_waveform(10, 40, gfx_w-15, 140);

// Draw info
gfx_set(1, 1, 1, 1);
draw_label(10, 195, "Waveform: " + 
  (slider3 == 0 ? "Saw" : 
   slider3 == 1 ? "Square" : 
   slider3 == 2 ? "Sine" : 
   slider3 == 3 ? "Triangle" : "FM"));
   
draw_label(200, 195, "Note: " + (note_on ? sprintf(#, "%d", slider1) : "None"));
