desc: TaalTools Digital Filters
author: Taal
version: 1.1

slider1:0<0,2,1{State Variable,Butterworth,Biquad}>Filter Type
slider2:0<0,2,1{LP,HP,BP}>Filter Mode 
slider3:1000<20,20000>Frequency (Hz)
slider4:0.7<0,1>Resonance
slider5:0<-24,24,0.1>Output (dB)

@init
ext_tail_size = -1;

// State Variable Filter
svf.lp = svf.bp = svf.hp = 0;
svf.lp2 = svf.bp2 = svf.hp2 = 0;

// Biquad
bq.x1 = bq.x2 = bq.y1 = bq.y2 = 0;
bq.x1r = bq.x2r = bq.y1r = bq.y2r = 0;

@slider
freq = min(slider3, srate/2);
res = slider4;
output = 10^(slider5/20);

// State Variable Filter coefficients  
f = 2 * sin($pi * freq/srate);
q = 1/res;

// Biquad coefficients
w0 = 2*$pi*freq/srate;
alpha = sin(w0)/(2*q);
cosw0 = cos(w0);

slider2 == 0 ? (
  // Lowpass
  b0 = (1 - cosw0)/2;
  b1 = 1 - cosw0;
  b2 = (1 - cosw0)/2;
) : slider2 == 1 ? (
  // Highpass  
  b0 = (1 + cosw0)/2;
  b1 = -(1 + cosw0);
  b2 = (1 + cosw0)/2;
) : (
  // Bandpass
  b0 = sin(w0)/2;
  b1 = 0;
  b2 = -sin(w0)/2;
);

a0 = 1 + alpha;
a1 = -2*cosw0;
a2 = 1 - alpha;

// Normalize coefficients
b0 /= a0;
b1 /= a0;
b2 /= a0;
a1 /= a0;
a2 /= a0;

@sample
function process_svf(input) local(output) (
  // State Variable Filter
  svf.hp = input - 2*res*svf.bp - svf.lp;
  svf.bp += f * svf.hp;
  svf.lp += f * svf.bp;
  
  slider2 == 0 ? output = svf.lp :
  slider2 == 1 ? output = svf.hp :
  output = svf.bp;
  
  output;
);

function process_biquad(input) local(output) (
  // Biquad Filter
  output = b0*input + b1*bq.x1 + b2*bq.x2 - a1*bq.y1 - a2*bq.y2;
  bq.x2 = bq.x1;
  bq.x1 = input;
  bq.y2 = bq.y1;
  bq.y1 = output;
  
  output;
);

// Process samples
slider1 == 0 ? (
  // State Variable
  out0 = process_svf(spl0);
  out1 = process_svf(spl1);
) : slider1 == 1 ? (
  // Butterworth (implemented as cascaded biquads)
  out0 = process_biquad(spl0);
  out1 = process_biquad(spl1);
) : (
  // Standard Biquad
  out0 = process_biquad(spl0);
  out1 = process_biquad(spl1);
);

spl0 = out0 * output;
spl1 = out1 * output;
