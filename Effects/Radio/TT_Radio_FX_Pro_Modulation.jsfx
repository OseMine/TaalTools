desc:TaalTools Radio FX Pro (with Modulation)
tags: radio vintage broadcast am fm modulation transmission
author: TaalTools
version: 1.2
changelog: Fixed modulation and effect amount processing
provides: TaalTools_RadioFX/TT_Radio_FX_Pro_Modulation.jsfx

// === SLIDERS ===
slider1:0<0,7,1>Decade Mode (0=50s,1=60s,2=70s,3=80s,4=90s,5=00s,6=10s,7=20s)
slider2:50<0,100,1>Effect Amount (%)
slider3:0<0,1,0.01>Noise Level
slider4:0<0,1,0.01>Crackle Level
slider5:0<0,1,0.01>Saturation Amount
slider6:1<0.1,2,0.01>Bandwidth Factor
slider7:0<0,5,1>Character/Style (0=Clean,1=Warm,2=Dark,3=Harsh,4=Lofi,5=Broken)
slider8:0<0,1,1>Analog Mode (0=Digital,1=Analog)
slider9:1<0,2,1>Transmission Mode (0=AM,1=FM,2=Digital)
slider10:1000<100,10000,1>Carrier Frequency (Hz)
slider11:1000<100,10000,1>Receiver Frequency (Hz)
slider12:1<0,1,1>Lock Carrier/Receiver Frequencies

@init
// Base variables
seed = 12345678;
lp0 = lp1 = 0;
hp0 = hp1 = 0;
bp0 = bp1 = 0;
noise_level = crackle_level = saturation_amount = 0;
bandwidth = 1.0;
effect_amount = 0.5;

// Modulation variables
phase_mod = phase_rec = 0.0;
prev_fm_sample = 0;
demod_dc = 0;
fm_delay = 0;

// Effect variables
phase = 0.0;
wobble_rate = 0.5;
wobble_amount = 0.003;
dropout_chance = 0.001;
dropout_active = 0;
dropout_timer = 0;

// === Helper Functions ===
function rand() local(temp) (
    seed = (seed * 1664525 + 1013904223) | 0;
    temp = seed/2147483648;
    temp;
);

function saturate(sample, amount) local(out) (
    out = sample * (1 + abs(sample) * amount);
    min(max(out, -1), 1);
);

function tanh(x) local(x2) (
    x2 = x * x;
    x * (27 + x2) / (27 + 9 * x2);
);

// AM modulation/demodulation with better envelope detection
function am_modulate(input, carrier) (
    input = max(min(input, 1), -1); // Clip input
    (1 + input) * carrier * 0.5; // Normalized AM
);

function am_demodulate(input, carrier) local(detected) (
    detected = abs(input * carrier * 2);
    demod_dc += (detected - demod_dc) * 0.001; // DC removal
    detected - demod_dc;
);

// FM modulation/demodulation with improved frequency deviation
function fm_modulate(input, phase) local(mod_phase) (
    mod_phase = phase + input * 0.5; // Increased modulation index
    sin(mod_phase * 2 * $pi);
);

function fm_demodulate(curr_sample, prev_sample) local(phase_diff) (
    phase_diff = atan2(curr_sample * prev_fm_sample - prev_sample * curr_sample,
                      curr_sample * curr_sample + prev_sample * prev_sample);
    prev_fm_sample = curr_sample;
    phase_diff * 2; // Increased demodulation gain
);

function update_decade_settings() (
    // defaults
    noise_level = 0.0;
    crackle_level = 0.0;
    saturation_amount = 0.0;
    bandwidth = 1.0;
    wobble_rate = 0.5;
    wobble_amount = 0.003;

    decade == 0 ? ( // 50s
        noise_level = 0.3;
        crackle_level = 0.2;
        saturation_amount = 0.5;
        bandwidth = 0.5;
        wobble_rate = 0.3;
        wobble_amount = 0.005;
    );
    decade == 1 ? ( // 60s
        noise_level = 0.25;
        crackle_level = 0.15;
        saturation_amount = 0.4;
        bandwidth = 0.6;
        wobble_amount = 0.004;
    );
    decade == 2 ? ( // 70s
        noise_level = 0.2;
        crackle_level = 0.1;
        saturation_amount = 0.35;
        bandwidth = 0.7;
        wobble_amount = 0.003;
    );
    decade == 3 ? ( // 80s
        noise_level = 0.15;
        crackle_level = 0.08;
        saturation_amount = 0.3;
        bandwidth = 0.8;
        wobble_amount = 0.002;
    );
    decade == 4 ? ( // 90s
        noise_level = 0.1;
        crackle_level = 0.05;
        saturation_amount = 0.25;
        bandwidth = 0.9;
        wobble_amount = 0.001;
    );
    decade == 5 ? ( // 00s
        noise_level = 0.05;
        crackle_level = 0.02;
        saturation_amount = 0.15;
        bandwidth = 1.0;
        wobble_amount = 0.0005;
    );
    decade == 6 ? ( // 10s
        noise_level = 0.03;
        crackle_level = 0.01;
        saturation_amount = 0.1;
        bandwidth = 1.1;
        wobble_amount = 0.0002;
    );
    decade == 7 ? ( // 20s
        noise_level = 0.02;
        crackle_level = 0.005;
        saturation_amount = 0.05;
        bandwidth = 1.2;
        wobble_amount = 0.0001;
    );

    // Manual override if user moves sliders
    noise_level = max(noise_level, slider3);
    crackle_level = max(crackle_level, slider4);
    saturation_amount = max(saturation_amount, slider5);
    bandwidth = slider6 * bandwidth;
);

@slider
decade = slider1;
effect_amount = slider2/100;
noise_level = slider3;
crackle_level = slider4;
saturation_amount = slider5;
bandwidth = slider6;
character = slider7;
analog_mode = slider8;
transmission_mode = slider9;
carrier_freq = slider10;
receiver_freq = slider11;
lock_freqs = slider12;

lock_freqs ? receiver_freq = carrier_freq;
update_decade_settings();

@block
// Update filter coefficients
lp_factor = 0.99 * (1/bandwidth);
hp_factor = 0.01 * bandwidth;
bp_factor = 0.5;

@sample
// Store dry signal for final mix
spl0_orig = spl0;
spl1_orig = spl1;

// Apply effect amount at input stage
spl0 *= effect_amount;
spl1 *= effect_amount;

// Mix to mono for transmission
signal = (spl0 + spl1) * 0.5;

// Carrier/Receiver phase calculation with better frequency scaling
phase_mod += (carrier_freq/srate) * 0.1; // Reduced carrier frequency impact
phase_mod >= 1 ? phase_mod -= 1;
carrier = sin(phase_mod * 2 * $pi);

phase_rec += (receiver_freq/srate) * 0.1;
phase_rec >= 1 ? phase_rec -= 1;
receive_carrier = sin(phase_rec * 2 * $pi);

// Apply modulation based on mode
transmission_mode == 0 ? (
    // AM with improved modulation depth
    modulated = am_modulate(signal, carrier);
    demodulated = am_demodulate(modulated, receive_carrier);
) : transmission_mode == 1 ? (
    // FM with better frequency deviation
    modulated = fm_modulate(signal, phase_mod);
    demodulated = fm_demodulate(modulated, fm_delay);
    fm_delay = modulated;
) : (
    // Digital with subtle artifacts
    modulated = signal;
    demodulated = modulated + (rand()*2-1)*0.001;
);

// Apply demodulated signal
spl0 = demodulated;
spl1 = demodulated;

// Random dropouts simulation
(dropout_active || rand() < dropout_chance) ? (
    dropout_timer += 1;
    dropout_active = 1;
    (dropout_timer > srate*0.05) ? (dropout_active=0; dropout_timer=0;);
    spl0 *= 0.2;
    spl1 *= 0.2;
);

// Generate and apply noise components
noise = rand() * noise_level;
crackle = (rand() > 0.99) ? rand() * crackle_level : 0;

spl0 += noise + crackle;
spl1 += noise + crackle;

// Multiband processing
// High
hp0 += (spl0 - hp0) * hp_factor;
hp1 += (spl1 - hp1) * hp_factor;

// Mid with extra saturation
bp0 += (spl0 - bp0) * bp_factor;
bp1 += (spl1 - bp1) * bp_factor;
bp0 = saturate(bp0, saturation_amount * 1.5);
bp1 = saturate(bp1, saturation_amount * 1.5);

// Low
lp0 += (spl0 - lp0) * lp_factor;
lp1 += (spl1 - lp1) * lp_factor;

// Recombine bands
spl0 = hp0 * 0.2 + bp0 * 0.5 + lp0 * 0.3;
spl1 = hp1 * 0.2 + bp1 * 0.5 + lp1 * 0.3;

// Wobble and stereo drift
phase += wobble_rate/srate;
phase >= 1 ? phase -= 1;
wobble = sin(phase*2*$pi) * wobble_amount;

spl0 *= 1 + wobble;
spl1 *= 1 - wobble;

// Apply character/style
character == 1 ? ( // Warm
    spl0 = saturate(spl0 * 1.2, 0.3);
    spl1 = saturate(spl1 * 1.2, 0.3);
) : character == 2 ? ( // Dark
    spl0 *= 0.85;
    spl1 *= 0.85;
    lp0 += (spl0 - lp0) * 0.6;
    lp1 += (spl1 - lp1) * 0.6;
    spl0 = lp0;
    spl1 = lp1;
) : character == 3 ? ( // Harsh
    spl0 = tanh(spl0 * 2);
    spl1 = tanh(spl1 * 2);
) : character == 4 ? ( // Lofi
    spl0 = floor(spl0 * 8) / 8;
    spl1 = floor(spl1 * 8) / 8;
) : character == 5 ? ( // Broken
    spl0 *= rand() * 0.8 + 0.2;
    spl1 *= rand() * 0.8 + 0.2;
);

// Analog mode
analog_mode ? (
    spl0 += (rand() * 2 - 1) * 0.002;
    spl1 += (rand() * 2 - 1) * 0.002;
    spl0 *= 1 + (rand() - 0.5) * 0.001;
    spl1 *= 1 + (rand() - 0.5) * 0.001;
);

// Mix with dry signal
spl0 = spl0_orig*(1-effect_amount) + spl0;
spl1 = spl1_orig*(1-effect_amount) + spl1;