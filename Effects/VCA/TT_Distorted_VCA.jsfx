desc: TaalTools Distorted VCA
author: Taal
version: 1.5

slider1:0.5<0,1,0.01>Input Gain
slider2:0<0,18,1{Classic,Fuzz,Retro,Simple,Waveshaper,NOOO,Tube,Hard Fuzz,Clipper,Old Waveshaper,Rectifier,Crusher,Multi Type 1,Multi Type 2,Multi Type 3,Hard Waveshaper,Retro Fuzz,Retro Overdrive}>Drive Type
slider3:0.7<0,1,0.01>Drive Amount
slider4:0.3<0,1,0.01>Tone
slider5:0.5<0,1,0.01>Mix
slider6:0<0,1,1{Mono,Stereo}>Process Mode
slider7:0<-24,24,0.1>Output (dB)
slider8:0<0,1,1{Off,On}>Oversample (x2) (Multi & Hard only)
slider9:0<0,1,1{Off,On}>Limiter (Multi & Hard only)
slider10:0<0,1,0.01>Muffle (Multi & Hard only)

@init
prev_l = prev_r = 0;
dc_block_l = dc_block_r = 0;
DCcoef = exp(-2 * $pi * 25/srate);

// Multi Waveshaper constants
c1 = 1;
c2 = -0.75;
c3 = 0.17;
fgain = 4.1;

//fir bandlimit
bl_c1 = 0.52;
bl_c2 = 0.54;
bl_c3 = -0.02;

// Initialize variables for oversampling
bl1_l1 = bl1_r1 = bl1_l2 = bl1_r2 = 0;
bl2_l1 = bl2_r1 = bl2_l2 = bl2_r2 = 0;
bl3_l1 = bl3_r1 = bl3_l2 = bl3_r2 = 0;
bl1_1 = bl1_2 = bl2_1 = bl2_2 = bl3_1 = bl3_2 = 0;
ps_out2l = ps_out2r = ps_out2 = 0;
o_out2l = o_out2r = o_out2 = 0;
s1l = s2l = s3l = s1r = s2r = s3r = 0;
s1 = s2 = s3 = 0;
lp_output_l = lp_output_r = lp_output = 0;

// Initialize Retro Overdrive variables
itm1 = otm1 = 0;
DCx = DCy = DCz = bias0 = fb0 = 0;
rando = 0.001;

// Classic distortion
function classic_drive(x, drive) local(preamp,soft,maxv,t,s,diff) (
  preamp = 2^((drive*50)/6);
  soft = 2^(drive*10);
  maxv = 2^(-12/6);
  x *= preamp;
  t = abs(x);
  t > maxv ? (
    s = sign(x);
    diff = t-maxv;
    x = s*(maxv + diff/(soft+diff));
  );
  x;
);

// Fuzz distortion
function fuzz_drive(x, drive) local(shape,maxv,as,s0) (
  shape = 1 + drive * 300;
  maxv = 2^(-25/6);
  as = abs(x);
  s0 = x * (as + shape) / (as*(as + shape-1) + 1);
  max(min(s0,maxv),-maxv);
);

// Retro distortion 
function retro_drive(x, drive) local(y,compressor) (
  y = 0.0001 + x*x;
  compressor = 0.15 + (x/y)*0.85;
  compressor = min(max(compressor,0.02),50);
  y = y*compressor;
  (x*1.618-y*drive)*0.618;
);

// Retro Fuzz distortion
function retro_fuzz_drive(x, drive) local(y,compressor) (
  y = 0.0001 + x*x;
  compressor = 0.15 + (x/y)*0.85;
  compressor = min(max(compressor,0.02),50);
  y = y*compressor;
  (x*1.618-y*drive)*0.618;
  x = x >= 0 ? 1 - exp(-x) : -1 + exp(x);
  x * 0.8;
);

// Simple waveshaper
function simple_drive(x, drive) local(foo) (
  foo = 2*drive/(1-drive);
  (1+foo)*x/(1+foo*abs(x));
);

// NOOO saturation
function nooo_drive(x, drive) local(ceiling,t1) (
  ceiling = exp(0.11512925464970228420089957273422 * -12);
  x *= ceiling;
  t1 = 2/(1+exp(-2*x)) - 1;
  x = x*(2/(1+exp(-2*drive)))/(drive);
  t1 = x + drive*(t1-x) + drive*(t1 * t1); 
  t1 /= ceiling;
);

// Additional distortion types
function tube_drive(x, drive) local(out) (
  drive = 1 + drive * 8;
  out = x * drive;
  out = out / (1 + abs(out));
  out += 0.1 * out * out; // Add even harmonics
  out;
);

function hard_fuzz_drive(x, drive) local(out) (
  x *= (1 + drive * 10);
  x = x >= 0 ? 1 - exp(-x) : -1 + exp(x);
  x * 0.8;
);

function clip_drive(x, drive) local(threshold) (
  threshold = 1/(1 + drive * 5);
  max(min(x * (1 + drive * 5), threshold), -threshold);
);

function old_wave_drive(x, drive) local(out) (
  out = sin(x * $pi * (1 + drive * 3));
  out *= 1 + drive;
  out / (1 + drive * 0.5);
);

function rectify_drive(x, drive) local(pos, neg) (
  pos = max(x, 0) * (1 + drive);
  neg = min(x, 0) * (1 - drive * 0.7);
  pos + neg;
);

function crush_drive(x, drive) local(bits, step) (
  bits = 16 - drive * 12;
  step = pow(2, -bits);
  floor(x/step + 0.5) * step;
);

// Multi Waveshaper Type 1
function multi_type1_drive(x, drive_k) (
  (1+drive_k)*x/(1+drive_k*abs(x));
);

// Multi Waveshaper Type 2
function multi_type2_drive(x, pi_drive, sin_pi_drive) (
  sin(pi_drive*x)*1/sin_pi_drive;
);

// Multi Waveshaper Type 3
function multi_type3_drive(x, drive1, drvc) (
  x = x * 0.5; // Reduce input level to match original
  drive1 = max(drive1, 1.01); // Ensure drive1 is at least 1.01 to avoid division issues
  (x)*(abs(x) + drive1)/((x*x) + (drive1-1)*abs(x) + 1)*(drive1/drvc);
);

// Hard Waveshaper (from Waveshaping Distortion by LOSER)
function hard_waveshaper_drive(x, drive) (
  hdistr = min(drive, 0.999);
  foo = 2*hdistr/(1-hdistr);
  (1+foo)*x/(1+foo*abs(x));
);

// Retro Fuzz functions
function logistic_softclip(x)
(
x >= 0.5 ? x = 1/(1+exp((-4*(x-0.5))));
x <= -0.5 ? x = -1/(1+exp((4*(x+0.5))));
x
);

function svf_lowp_rf(v0,cutoff,Q)
instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,mo,m1,m2)
(
 g = tan($pi*cutoff/srate);
 k = 1/Q;
 a1 = 1/(1+g*(g+k));
 a2 = g*a1;
 a3 = g*a2;
 m0 = 0;
 m1 = 0;
 m2 = 1;
 v3 = v0-ic2eq;
 v1 = a1*ic1eq+a2*v3;
 v2 = ic2eq+a2*ic1eq+a3*v3;
 ic1eq = 2*v1-ic1eq;
 ic2eq = 2*v2-ic2eq;
 m0*v0+m1*v1+m2*v2
);

function svf_highp_rf(v0,cutoff,Q)
instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,m0,m1,m2)
(
 g = tan($pi*cutoff/srate);
 k = 1/Q;
 a1 = 1/(1+g*(g+k));
 a2 = g*a1;
 a3 = g*a2;
 m0 = 1;
 m1 = -k;
 m2 = -1;
 v3 = v0-ic2eq;
 v1 = a1*ic1eq+a2*v3;
 v2 = ic2eq+a2*ic1eq+a3*v3;
 ic1eq = 2*v1-ic1eq;
 ic2eq = 2*v2-ic2eq;
 m0*v0+m1*v1+m2*v2
);

function diode_clipper_rf(x)
local(f)
(
f = min(1,max(-1,x));
x*sin(($pi/2)*f)^12
);

// Complete Retro Fuzz processing function
function retro_fuzz_drive_rf(x, drive)
local(ingain, outgain, c0, d0, capres0, bias0)
instance(leftlow, bi0, DC0, aa0, logl, aa00, DC2, leftlow2, log2l, DC4)
(
  ingain = 10^(drive*20/20);
  outgain = 1.0;
  
  // Input gain
  x *= ingain;
  x *= 12;
  
  // DC leakage
  x += 0.018*bias0;
  
  // Stage 1
  capres0 = c0;
  d0 = c0.diode_clipper_rf(c0);
  d0 = leftlow.svf_lowp_rf(d0, 7000, 0.67);
  c0 = 0.3*capres0 + 0.7*d0;
  c0 = x - 0.618*c0;
  x = c0;
  
  // DC generator
  bias0 = sqrt(0.018+x^2);
  bias0 = bi0.svf_lowp_rf(bias0, 360, 0.67);
  
  // Highpass capacitor
  x = DC0.svf_highp_rf(x, 75, 0.33);
  
  // AA filter
  x = aa0.svf_lowp_rf(x, 8000, 0.25);
  
  // Transistor saturation 1
  x = logl.logistic_softclip(x);
  
  // AA filter
  x = aa00.svf_lowp_rf(x, 9000, 0.25);
  
  // Highpass capacitor
  x = DC2.svf_highp_rf(5*x, 50, 0.33);
  
  // DC leakage
  x += 0.25*bias0;
  
  // Stage 2
  capres0 = c0;
  d0 = c0.diode_clipper_rf(c0);
  d0 = leftlow2.svf_lowp_rf(d0, 7000, 0.67);
  c0 = 0.3*capres0 + 0.7*d0;
  c0 = x - 0.6*c0;
  x = 0.618*c0;
  
  // Transistor saturation 2
  x = log2l.logistic_softclip(2*x);
  
  // DC block
  x = DC4.svf_highp_rf(x, 75, 0.67);
  
  // Output gain
  x *= 0.25;
  x *= outgain;
  
  x
);

// Retro Overdrive functions
function tube_clip_ro(x)
instance (f,f1,f2,f3,f4)
(
  x = x*0.8;
  f = max(-1,min(1,x));
  f1 = sign(x)*abs(x)^(2/3);
  f2 = (3*f - f^3)*0.5;
  f3 = abs(sin(($pi/2)*f))^(3/2);
  f4 = f1*f3 + f2*(1-f3);
  f4 * 0.9
);

function diode_ro(x) 
instance(out,lastx,diodex,f1)
(
  diodex *= 0.34;
  loop(6,
    diodex *= rand(2)*0.000004+0.999996;
    out = 1*x - diodex*0.618;
    lastx = out;
    f1 = max(-1,min(1,lastx))*($pi/2);
    diodex = lastx*0.7071 - sin(f1);
    out
  );
  out
);

function svf_lowp_ro(v0,cutoff,Q)
instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,mo,m1,m2)
(
  g = tan($pi*cutoff/srate);
  k = 1/Q;
  a1 = 1/(1+g*(g+k));
  a2 = g*a1;
  a3 = g*a2;
  m0 = 0;
  m1 = 0;
  m2 = 1;
  v3 = v0-ic2eq;
  v1 = a1*ic1eq+a2*v3;
  v2 = ic2eq+a2*ic1eq+a3*v3;
  ic1eq = 2*v1-ic1eq;
  ic2eq = 2*v2-ic2eq;
  m0*v0+m1*v1+m2*v2
);

// Complete Retro Overdrive processing function
function retro_overdrive_drive(x, drive)
local(rando, DCx, DCy, DCz, startup, fb0, bias0, otm1, itm1, a, b)
instance(le, t0, left, last_in_gain, last_OD_gain, last_gain, last_out_gain)
(
  // Initialize parameters based on drive amount
  last_in_gain = 10^((drive * 15)/20);
  last_OD_gain = 10^((drive * 20)/20);
  last_gain = 10^((drive * 15)/20);
  last_out_gain = 10^((drive * 10)/20);
  
  DCx = 0.32;
  DCy = 0.1;
  DCz = 0.387;
  startup = 1; // Already initialized
  rando = rand(1)*0.0015;
  
  // DC filter parameters
  Fc = 10/srate;
  a = exp(-2*$pi*Fc);
  b = 1-a;
  
  // Input gain
  x *= last_in_gain;
  
  // Diode soft clip
  x *= last_OD_gain;
  x *= 0.5;
  x = le.diode_ro(x);
  x /= sqrt(last_OD_gain);
  
  // Amp gain
  x *= last_gain;
  
  // Tube amp
  x = t0.tube_clip_ro(x-DCx-bias0*0.42);
  x = min(1.5-rando, x);
  x += DCy;
  
  fb0 = abs(x+rando);
  bias0 = left.svf_lowp_ro(fb0, 11, 0.45);
  x += DCz;
  
  // DC filter and tube clip
  x = min(1.7-rando*0.03, x);
  otm1 = a*otm1 + x - itm1;
  itm1 = x;
  x = otm1;
  
  // Output
  x *= last_out_gain;
  x = min(0.98-rando*0.02, max(-0.98+rando*0.02, x));
  
  x
);

@slider
output_vol = 10^(slider7/20);
tone_factor = slider4 * 0.9 + 0.1;

// Multi Waveshaper parameters
drive1 = 1 + slider3 * 100 / 35;
drvc = 1.5;
drive2 = slider3 * 100 / 99 - 0.07;
drv2_k = drive2/(1-drive2);
pi_drv2 = $pi * drive2;
sin_pi_drv2 = sin($pi * drive2);

// Initialize muffle filter if needed
slider10 > 0 ? (
  muffle = 20000 - (slider10 * 100 + 9000);
  lp_cut = 2 * $pi * muffle;
  lp_n = 1/(lp_cut + 2 * srate);
  lp_b1 = (2 * srate - lp_cut) * lp_n;
  lp_a0 = lp_a1 = lp_cut * lp_n;
);

@sample
// Input stage with gain
in_l = spl0 * slider1;
in_r = spl1 * slider1;

// Apply selected drive type
slider2 < 17 ? (
  // Original distortion types
  slider2 == 0 ? (
    // Classic
    dist_l = classic_drive(in_l, slider3);
    dist_r = classic_drive(in_r, slider3);
  ) : slider2 == 1 ? (
    // Fuzz
    dist_l = fuzz_drive(in_l, slider3);
    dist_r = fuzz_drive(in_r, slider3);
  ) : slider2 == 2 ? (
    // Retro
    dist_l = retro_drive(in_l, slider3);
    dist_r = retro_drive(in_r, slider3);
  ) : slider2 == 3 ? (
    // Simple
    dist_l = simple_drive(in_l, slider3);
    dist_r = simple_drive(in_r, slider3);
  ) : slider2 == 4 ? (
    // Waveshaper
    dist_l = 2/(1+exp(-2*in_l*slider3)) - 1;
    dist_r = 2/(1+exp(-2*in_r*slider3)) - 1;
  ) : slider2 == 5 ? (
    // NOOO
    dist_l = nooo_drive(in_l, slider3);
    dist_r = nooo_drive(in_r, slider3);
  ) : slider2 == 6 ? (
    // Tube
    dist_l = tube_drive(in_l, slider3);
    dist_r = tube_drive(in_r, slider3);
  ) : slider2 == 7 ? (
    // Hard Fuzz
    dist_l = hard_fuzz_drive(in_l, slider3);
    dist_r = hard_fuzz_drive(in_r, slider3);
  ) : slider2 == 8 ? (
    // Clipper
    dist_l = clip_drive(in_l, slider3);
    dist_r = clip_drive(in_r, slider3);
  ) : slider2 == 9 ? (
    // Old Waveshaper
    dist_l = old_wave_drive(in_l, slider3);
    dist_r = old_wave_drive(in_r, slider3);
  ) : slider2 == 10 ? (
    // Rectifier
    dist_l = rectify_drive(in_l, slider3);
    dist_r = rectify_drive(in_r, slider3);
  ) : slider2 == 11 ? (
    // Crusher
    dist_l = crush_drive(in_l, slider3);
    dist_r = crush_drive(in_r, slider3);
  ) : slider2 == 16 ? (
    // Retro Fuzz
    dist_l = retro_fuzz_drive_rf(in_l, slider3);
    dist_r = retro_fuzz_drive_rf(in_r, slider3);
  ) : slider2 == 17 ? (
    // Retro Overdrive
    dist_l = retro_overdrive_drive(in_l, slider3);
    dist_r = retro_overdrive_drive(in_r, slider3);
  ) : (
    // Multi Types 1-3 (12-14)
    multi_type = slider2 - 12; // 0, 1, 2 for Type 1, Type 2, Type 3
    
    // Mono or stereo processing
    slider6 == 0 ? (
      // Mono processing
      in = (in_l + in_r) / 2;
      
      // Process with or without oversampling
      slider8 == 1 ? (
        // With oversampling
        // Power series in
        ps_out1 = 0.5 * (in + ps_out2);
        ps_out2 = 0.5 * ps_out1;
        
        // Apply drive based on type
        multi_type == 0 ? (
          o_in1 = multi_type1_drive(ps_out1, drv2_k);
          o_in2 = multi_type1_drive(ps_out2, drv2_k);
        ) : multi_type == 1 ? (
          o_in1 = multi_type2_drive(ps_out1, pi_drv2, sin_pi_drv2);
          o_in2 = multi_type2_drive(ps_out2, pi_drv2, sin_pi_drv2);
        ) : (
          o_in1 = multi_type3_drive(ps_out1, drive1, drvc);
          o_in2 = multi_type3_drive(ps_out2, drive1, drvc);
        );
        
        // Bandlimit
        bl3_1 = bl2_1;
        bl3_2 = bl2_2;
        
        bl2_1 = bl1_1;
        bl2_2 = bl1_2;
        
        bl1_1 = o_in1;
        bl1_2 = o_in2;
        
        bl_out1 = (bl1_1 * bl_c1 + bl2_1 * bl_c2 + bl3_1 * bl_c3);
        bl_out2 = (bl1_2 * bl_c1 + bl2_2 * bl_c2 + bl3_2 * bl_c3);
        
        // Power series out
        o_out1 = 0.5 * (bl_out1 + o_out2);
        o_out2 = 0.5 * (bl_out2 + o_out1);
        
        // FIR restoration
        s3 = s2;
        s2 = s1;
        s1 = o_out1;
        
        dist_l = dist_r = (s1 * c1 + s2 * c2 + s3 * c3) * fgain;
      ) : (
        // Without oversampling
        multi_type == 0 ? (
          dist_l = dist_r = multi_type1_drive(in, drv2_k);
        ) : multi_type == 1 ? (
          dist_l = dist_r = multi_type2_drive(in, pi_drv2, sin_pi_drv2);
        ) : (
          dist_l = dist_r = multi_type3_drive(in, drive1, drvc);
        );
      );
    ) : (
      // Stereo processing
      slider8 == 1 ? (
        // With oversampling
        // Power series in
        ps_out1l = 0.5 * (in_l + ps_out2l);
        ps_out2l = 0.5 * ps_out1l;
        
        ps_out1r = 0.5 * (in_r + ps_out2r);
        ps_out2r = 0.5 * ps_out1r;
        
        // Apply drive based on type
        multi_type == 0 ? (
          o_in1l = multi_type1_drive(ps_out1l, drv2_k);
          o_in2l = multi_type1_drive(ps_out2l, drv2_k);
          o_in1r = multi_type1_drive(ps_out1r, drv2_k);
          o_in2r = multi_type1_drive(ps_out2r, drv2_k);
        ) : multi_type == 1 ? (
          o_in1l = multi_type2_drive(ps_out1l, pi_drv2, sin_pi_drv2);
          o_in2l = multi_type2_drive(ps_out2l, pi_drv2, sin_pi_drv2);
          o_in1r = multi_type2_drive(ps_out1r, pi_drv2, sin_pi_drv2);
          o_in2r = multi_type2_drive(ps_out2r, pi_drv2, sin_pi_drv2);
        ) : (
          o_in1l = multi_type3_drive(ps_out1l, drive1, drvc);
          o_in2l = multi_type3_drive(ps_out2l, drive1, drvc);
          o_in1r = multi_type3_drive(ps_out1r, drive1, drvc);
          o_in2r = multi_type3_drive(ps_out2r, drive1, drvc);
        );
        
        // Bandlimit
        bl3_l1 = bl2_l1;
        bl3_r1 = bl2_r1;
        bl3_l2 = bl2_l2;
        bl3_r2 = bl2_r2;
        
        bl2_l1 = bl1_l1;
        bl2_r1 = bl1_r1;
        bl2_l2 = bl1_l2;
        bl2_r2 = bl1_r2;
        
        bl1_l1 = o_in1l;
        bl1_r1 = o_in1r;
        bl1_l2 = o_in2l;
        bl1_r2 = o_in2r;
        
        bl_out1l = (bl1_l1 * bl_c1 + bl2_l1 * bl_c2 + bl3_l1 * bl_c3);
        bl_out1r = (bl1_r1 * bl_c1 + bl2_r1 * bl_c2 + bl3_r1 * bl_c3);
        bl_out2l = (bl1_l2 * bl_c1 + bl2_l2 * bl_c2 + bl3_l2 * bl_c3);
        bl_out2r = (bl1_r2 * bl_c1 + bl2_r2 * bl_c2 + bl3_r2 * bl_c3);
        
        // Power series out
        o_out1l = 0.5 * (bl_out1l + o_out2l);
        o_out2l = 0.5 * (bl_out2l + o_out1l);
        
        o_out1r = 0.5 * (bl_out1r + o_out2r);
        o_out2r = 0.5 * (bl_out2r + o_out1r);
        
        // FIR restoration
        s3l = s2l;
        s3r = s2r;
        s2l = s1l;
        s2r = s1r;
        s1l = o_out1l;
        s1r = o_out1r;
        
        dist_l = (s1l * c1 + s2l * c2 + s3l * c3) * fgain;
        dist_r = (s1r * c1 + s2r * c2 + s3r * c3) * fgain;
      ) : (
        // Without oversampling
        multi_type == 0 ? (
          dist_l = multi_type1_drive(in_l, drv2_k);
          dist_r = multi_type1_drive(in_r, drv2_k);
        ) : multi_type == 1 ? (
          dist_l = multi_type2_drive(in_l, pi_drv2, sin_pi_drv2);
          dist_r = multi_type2_drive(in_r, pi_drv2, sin_pi_drv2);
        ) : (
          dist_l = multi_type3_drive(in_l, drive1, drvc);
          dist_r = multi_type3_drive(in_r, drive1, drvc);
        );
      );
    );
  );
) : (
  // Hard Waveshaper (15)
  // Mono or stereo processing
  slider6 == 0 ? (
    // Mono processing
    in = (in_l + in_r) / 2;
    
    // Process with or without oversampling
    slider8 == 1 ? (
      // With oversampling
      // Power series in
      ps_out1 = 0.5 * (in + ps_out2);
      ps_out2 = 0.5 * ps_out1;
      
      // Apply hard waveshaper
      o_in1 = hard_waveshaper_drive(ps_out1, slider3);
      o_in2 = hard_waveshaper_drive(ps_out2, slider3);
      
      // Bandlimit
      bl3_1 = bl2_1;
      bl3_2 = bl2_2;
      
      bl2_1 = bl1_1;
      bl2_2 = bl1_2;
      
      bl1_1 = o_in1;
      bl1_2 = o_in2;
      
      bl_out1 = (bl1_1 * bl_c1 + bl2_1 * bl_c2 + bl3_1 * bl_c3);
      bl_out2 = (bl1_2 * bl_c1 + bl2_2 * bl_c2 + bl3_2 * bl_c3);
      
      // Power series out
      o_out1 = 0.5 * (bl_out1 + o_out2);
      o_out2 = 0.5 * (bl_out2 + o_out1);
      
      // FIR restoration
      s3 = s2;
      s2 = s1;
      s1 = o_out1;
      
      dist_l = dist_r = (s1 * c1 + s2 * c2 + s3 * c3) * fgain;
    ) : (
      // Without oversampling
      dist_l = dist_r = hard_waveshaper_drive(in, slider3);
    );
  ) : (
    // Stereo processing
    slider8 == 1 ? (
      // With oversampling
      // Power series in
      ps_out1l = 0.5 * (in_l + ps_out2l);
      ps_out2l = 0.5 * ps_out1l;
      
      ps_out1r = 0.5 * (in_r + ps_out2r);
      ps_out2r = 0.5 * ps_out1r;
      
      // Apply hard waveshaper
      o_in1l = hard_waveshaper_drive(ps_out1l, slider3);
      o_in2l = hard_waveshaper_drive(ps_out2l, slider3);
      o_in1r = hard_waveshaper_drive(ps_out1r, slider3);
      o_in2r = hard_waveshaper_drive(ps_out2r, slider3);
      
      // Bandlimit
      bl3_l1 = bl2_l1;
      bl3_r1 = bl2_r1;
      bl3_l2 = bl2_l2;
      bl3_r2 = bl2_r2;
      
      bl2_l1 = bl1_l1;
      bl2_r1 = bl1_r1;
      bl2_l2 = bl1_l2;
      bl2_r2 = bl1_r2;
      
      bl1_l1 = o_in1l;
      bl1_r1 = o_in1r;
      bl1_l2 = o_in2l;
      bl1_r2 = o_in2r;
      
      bl_out1l = (bl1_l1 * bl_c1 + bl2_l1 * bl_c2 + bl3_l1 * bl_c3);
      bl_out1r = (bl1_r1 * bl_c1 + bl2_r1 * bl_c2 + bl3_r1 * bl_c3);
      bl_out2l = (bl1_l2 * bl_c1 + bl2_l2 * bl_c2 + bl3_l2 * bl_c3);
      bl_out2r = (bl1_r2 * bl_c1 + bl2_r2 * bl_c2 + bl3_r2 * bl_c3);
      
      // Power series out
      o_out1l = 0.5 * (bl_out1l + o_out2l);
      o_out2l = 0.5 * (bl_out2l + o_out1l);
      
      o_out1r = 0.5 * (bl_out1r + o_out2r);
      o_out2r = 0.5 * (bl_out2r + o_out1r);
      
      // FIR restoration
      s3l = s2l;
      s3r = s2r;
      s2l = s1l;
      s2r = s1r;
      s1l = o_out1l;
      s1r = o_out1r;
      
      dist_l = (s1l * c1 + s2l * c2 + s3l * c3) * fgain;
      dist_r = (s1r * c1 + s2r * c2 + s3r * c3) * fgain;
    ) : (
      // Without oversampling
      dist_l = hard_waveshaper_drive(in_l, slider3);
      dist_r = hard_waveshaper_drive(in_r, slider3);
    );
  );
  
  // Apply muffle if enabled
  slider10 > 0 ? (
    // Apply lowpass filter
    lp_output_l = dist_l * lp_a0 + dist_l * lp_a1 + lp_output_l * lp_b1;
    lp_output_r = dist_r * lp_a0 + dist_r * lp_a1 + lp_output_r * lp_b1;
    dist_l = lp_output_l;
    dist_r = lp_output_r;
  );
  
  // Apply limiter if enabled
  slider9 == 1 ? (
    dist_l = min(max(dist_l, -0.98), 0.98);
    dist_r = min(max(dist_r, -0.98), 0.98);
  );
);

// Tone control (simple lowpass)
dist_l = dist_l * tone_factor + prev_l * (1 - tone_factor);
dist_r = dist_r * tone_factor + prev_r * (1 - tone_factor);
prev_l = dist_l;
prev_r = dist_r;

// DC blocking
otm1 = DCcoef*otm1 + dist_l - itm1; itm1=dist_l; dist_l=otm1;
otm2 = DCcoef*otm2 + dist_r - itm2; itm2=dist_r; dist_r=otm2;

// Mix
out_l = in_l * (1 - slider5) + dist_l * slider5;
out_r = slider6 ? (in_r * (1 - slider5) + dist_r * slider5) : out_l;

spl0 = out_l * output_vol;
spl1 = out_r * output_vol;