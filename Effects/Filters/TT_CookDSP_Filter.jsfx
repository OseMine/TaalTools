desc: TaalTools CookDSP Filter
author: Taal
version: 1.0
changelog: Initial release

import ../Add/cookdsp.jsfx-inc

slider1:1000<20,20000,1:log>Filter Cutoff
slider2:0.7<0.1,5,0.01>Filter Resonance
slider3:0<0,4,1{Lowpass,Highpass,Bandpass,Notch,Peaking}>Filter Type
slider4:0<0,1,0.01>Mix

@init
// Initialize CookDSP filter
filt.new(0);
filt.moog(1000, 0.7);

@slider
// Update filter parameters
filter_freq = slider1;
filter_q = slider2;
filter_type = slider3;
mix = slider4;

// Set filter based on type
filter_type == 0 ? filt.moog(filter_freq, filter_q, 0) :     // Lowpass
filter_type == 1 ? filt.butbp(filter_freq, filter_q, 0) :    // Highpass (using bandpass with high Q)
filter_type == 2 ? filt.butbp(filter_freq, filter_q, 0) :    // Bandpass
filter_type == 3 ? filt.butbr(filter_freq, filter_q, 0) :    // Notch
filter_type == 4 ? filt.peakeq(filter_freq, filter_q, 6, 0); // Peaking EQ with 6dB gain

@sample
// Store original signal for mix
orig0 = spl0;
orig1 = spl1;

// Apply filter
spl0 = filt.process(spl0, 0);
spl1 = filt.process(spl1, 0);

// Apply mix
spl0 = orig0 * (1 - mix) + spl0 * mix;
spl1 = orig1 * (1 - mix) + spl1 * mix;

@gfx 500 200
function draw_label(x, y, txt) (
  gfx_x = x; gfx_y = y;
  gfx_drawstr(txt);
);

function draw_filter_response(x, y, w, h) local(i, px, py, freq, response, phase) (
  gfx_set(0.2, 0.7, 0.9, 1);
  
  // Draw frequency response
  px = x;
  loop(w,
    // Calculate logarithmic frequency from 20Hz to 20kHz
    freq = 20 * pow(1000, (px - x) / w);
    
    // Calculate filter response based on type
    filter_type == 0 ? ( // Lowpass
      response = 1 / (1 + pow((freq / filter_freq), 2));
    ) : filter_type == 1 ? ( // Highpass
      response = 1 / (1 + pow((filter_freq / freq), 2));
    ) : filter_type == 2 ? ( // Bandpass
      response = 1 / (1 + filter_q * abs(freq / filter_freq - filter_freq / freq));
    ) : filter_type == 3 ? ( // Notch
      response = abs(1 - 1 / (1 + filter_q * abs(freq / filter_freq - filter_freq / freq)));
    ) : ( // Peaking
      bw = filter_freq / filter_q;
      response = 1 + 2 / (1 + pow((freq - filter_freq) / bw, 2));
    );
    
    // Draw response line
    py = y + h - response * h * 0.8;
    px > x ? gfx_line(px-1, prev_py, px, py);
    prev_py = py;
    px += 1;
  );
  
  // Draw cutoff frequency line
  gfx_set(1, 0.5, 0.2, 0.5);
  px = x + w * log(filter_freq / 20) / log(1000);
  gfx_line(px, y, px, y + h);
);

// Clear background
gfx_set(0.2, 0.2, 0.2, 1);
gfx_rect(0, 0, gfx_w, gfx_h);

// Draw title
gfx_set(1, 1, 1, 1);
draw_label(10, 10, "TaalTools CookDSP Filter");

// Draw filter response
gfx_set(0.8, 0.8, 0.8, 0.5);
gfx_rect(10, 40, gfx_w-20, 140);
draw_filter_response(10, 40, gfx_w-20, 140);

// Draw info
gfx_set(1, 1, 1, 1);
draw_label(10, 195, "Filter Type: " + 
  (filter_type == 0 ? "Lowpass" : 
   filter_type == 1 ? "Highpass" : 
   filter_type == 2 ? "Bandpass" : 
   filter_type == 3 ? "Notch" : "Peaking"));
   
draw_label(200, 195, "Cutoff: " + sprintf(#, "%.0f Hz", filter_freq));
draw_label(350, 195, "Q: " + sprintf(#, "%.2f", filter_q));
