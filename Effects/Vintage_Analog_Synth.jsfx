desc: TaalTools VA Oscillator
author: Taal
version: 1.4

slider1:0<0,127,1>MIDI Note Display
slider2:0.5<0,1,0.01>Oscillator Level
slider3:0<0,4,1{Saw,Square,Sine,Triangle,Noise}>Waveform
slider4:0<-24,24,1>Tune (st)
slider5:0<-100,100,1>Fine Tune (cents)
slider6:0<-2,2,1>Octave Shift

@init
phase = 0;
current_freq = 440;
note_on = 0;
vel = 1.0;
prev_sample = 0;

// Analog warmth parameters
sub_amount = 0.3;     
num_harmonics = 256;  // More harmonics for richer sound
brightness = 0.98;    // Even slower harmonics rolloff
warmth = 0.15;       // Analog warmth amount
softclip = 1.2;      // Add missing softclip variable

// Custom analog saturation function (replacement for tanh)
function saturate(x) local(out) (
  out = x * (1.5 - 0.5 * abs(x));
  min(max(out, -1), 1);
);

function analog_saturate(x) (
  x *= softclip;
  x = min(max(x, -1), 1);  // Clip
  x - (x*x*x)/3;           // Soft saturation
);

function generate_saw(p) local(out, i, amp) (
  out = 0;
  // Pure additive synthesis with steeper rolloff for undertones
  i = 1;
  while(i <= num_harmonics) (
    // Reduce undertones, enhance mids and highs
    amp = 1/i * (1 + (i/32) * 0.2); // Boost higher harmonics slightly
    out += sin(p * i) * amp;
    i += 1;
  );
  out = out * 0.6; // Normalize
  out = saturate(out * 1.3); // Slight extra drive
  out;
);

function generate_square(p) local(out, i, amp) (
  out = 0;
  // Enhanced odd harmonics with more undertones
  i = 1;
  while(i <= num_harmonics) (
    n = 2*i - 1;  // Odd harmonics only
    // Slower rolloff for first few harmonics, then steeper
    i <= 4 ? (
      amp = 1/n * 0.9;  // Strong fundamental and low harmonics
    ) : (
      amp = 1/n * pow(brightness, (i-4) * 0.3);  // Steeper rolloff for higher harmonics
    );
    out += sin(p * n) * amp;
    i += 1;
  );
  // Add more low-end weight
  out = out * 0.6;
  out += sin(p/2) * 0.15; // Sub oscillator
  out += sin(p) * 0.2;    // Enhanced fundamental
  out = saturate(out * 1.4);
  out;
);

function generate_triangle(p) local(out) (
  // Direct algorithm for better shape
  out = 2 * abs(2 * (p/$pi - floor(p/$pi + 0.5))) - 1;
  // Add subtle harmonics for warmth
  out += sin(p * 3) * 0.02;
  out += sin(p * 5) * 0.01;
  out = saturate(out * 1.1);
  out;
);

function generate_sine(p) local(out) (
  out = sin(p);
  // Very subtle harmonics for warmth
  out += sin(p * 2) * 0.005;
  out += sin(p * 3) * 0.002;
  out = saturate(out * 1.05); // Very light saturation
  out;
);

@block
while (midirecv(offset, msg1, msg2, msg3)) (
  status = msg1 & $xF0;
  
  status == $x90 && msg3 > 0 ? (
    note_on = 1;
    vel = msg3/127;
    slider1 = msg2;
    current_freq = 440 * pow(2, (msg2 + slider4 + slider5/100 + slider6*12 - 69) / 12);
  );
  
  (status == $x80 || (status == $x90 && msg3 == 0)) ? (
    note_on = 0;
  );
);

@sample
phase += current_freq * 2 * $pi / srate;
phase >= 2*$pi ? phase -= 2*$pi;

osc = slider3 == 0 ? generate_saw(phase) :
      slider3 == 1 ? generate_square(phase) :
      slider3 == 2 ? generate_sine(phase) :
      slider3 == 3 ? generate_triangle(phase) :
      (rand(2) - 1);

// Smooth transitions and add warmth
osc = osc * 0.9 + prev_sample * 0.1;
prev_sample = osc;

spl0 = spl1 = osc * slider2 * vel * note_on * 0.3;
