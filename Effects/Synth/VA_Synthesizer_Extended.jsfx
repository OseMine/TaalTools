desc: TaalTools VA Synthesizer Extended
author: Taal
version: 1.0
changelog: Initial Release

slider1:0<0,127,1>MIDI Note Display
slider2:0.5<0,1,0.01>Oscillator Level
slider3:0<0,7,1{Saw,Square,Sine,Triangle,Pulse,SuperSaw,Hard Sync,Noise}>Waveform
slider4:0<-24,24,1>Tune (st)
slider5:0<-100,100,1>Fine Tune (cents)
slider6:0<-2,2,1>Octave Shift
slider7:0.5<0.01,0.99,0.01>Pulse Width
slider8:0.3<0,1,0.01>Sub Amount

@init
phase = phase2 = 0;
current_freq = 440;
note_on = 0;
vel = 1.0;
prev_sample = 0;

// Synthesis parameters
num_harmonics = 256;
brightness = 0.98;

function saturate(x) local(out) (
  out = x * (1.5 - 0.5 * abs(x));
  min(max(out, -1), 1);
);

function generate_saw(p) local(out, i) (
  out = 0;
  // Pure additive synthesis with natural harmonics series
  i = 1;
  while(i <= num_harmonics) (
    out += sin(p * i) / i;  // Pure 1/n rolloff
    i += 1;
  );
  out = out * 0.5; // Normalize
  saturate(out);
);

function generate_square(p) local(out, i, amp) (
  out = 0;
  // Enhanced odd harmonics with strong presence
  i = 1;
  while(i <= num_harmonics) (
    n = 2*i - 1;  // Odd harmonics only
    amp = 1/n * pow(brightness, (i-1) * 0.3);  // Slower rolloff
    out += sin(p * n) * amp;
    i += 1;
  );
  out = out * 0.7;  // Normalize
  saturate(out * 1.4);
);

function generate_triangle(p) local(out, i) (
  out = 0;
  i = 1;
  while(i <= num_harmonics) (
    n = 2*i - 1;
    amp = pow(-1, i-1) / (n * n);
    out += sin(p * n) * amp;
    i += 1;
  );
  out = out * 1.2;  // Boost volume slightly
  saturate(out);
);

function generate_sine(p) (
  sin(p);
);

function generate_pulse(p, width) local(out, i) (
  out = 0;
  i = 1;
  while(i <= num_harmonics) (
    amp = sin(i * pi * width) / (i * pi);
    out += sin(p * i) * amp * pow(brightness, (i-1) * 0.2);
    i += 1;
  );
  out = out * 2;
  saturate(out * 1.3);
);

function generate_supersaw(p) local(out, i, detune) (
  out = 0;
  // Main saw
  i = 1;
  while(i <= num_harmonics) (
    out += sin(p * i) / i;
    i += 1;
  );
  // Detuned copies
  out += generate_saw(p * 1.01) * 0.3;
  out += generate_saw(p * 0.99) * 0.3;
  out += generate_saw(p * 1.02) * 0.2;
  out += generate_saw(p * 0.98) * 0.2;
  saturate(out * 0.5);
);

function generate_hardsync(p) local(out, sync_phase) (
  out = 0;
  sync_phase = p * 1.5; // 1.5 = sync ratio
  sync_phase >= 2*$pi ? sync_phase -= 2*$pi;
  out = generate_saw(p) * 0.6 + generate_saw(sync_phase) * 0.4;
  saturate(out * 1.2);
);

@block
while (midirecv(offset, msg1, msg2, msg3)) (
  status = msg1 & $xF0;
  
  status == $x90 && msg3 > 0 ? (
    note_on = 1;
    vel = msg3/127;
    slider1 = msg2;
    current_freq = 440 * pow(2, (msg2 + slider4 + slider5/100 + slider6*12 - 69) / 12);
  );
  
  (status == $x80 || (status == $x90 && msg3 == 0)) ? (
    note_on = 0;
  );
  
  midisend(offset, msg1, msg2, msg3); // Pass through MIDI
);

// Update frequency when sliders change
note_on ? (
  current_freq = 440 * pow(2, (slider1 + slider4 + slider5/100 + slider6*12 - 69) / 12);
);

@sample
phase += current_freq * 2 * $pi / srate;
phase >= 2*$pi ? phase -= 2*$pi;

osc = slider3 == 0 ? generate_saw(phase) :
      slider3 == 1 ? generate_square(phase) :
      slider3 == 2 ? generate_sine(phase) :
      slider3 == 3 ? generate_triangle(phase) :
      slider3 == 4 ? generate_pulse(phase, slider7) :
      slider3 == 5 ? generate_supersaw(phase) :
      slider3 == 6 ? generate_hardsync(phase) :
      (rand(2) - 1);

// Add sub oscillator
sub = generate_sine(phase/2) * slider8;
osc = osc * 0.7 + sub * 0.3;

// Smooth transitions
osc = osc * 0.9 + prev_sample * 0.1;
prev_sample = osc;

spl0 = spl1 = osc * slider2 * vel * note_on * 0.3;
